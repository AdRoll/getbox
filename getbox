#!/usr/bin/env python
from __future__ import print_function
import subprocess
import argparse
import getpass
import shutil
import random
import socket
import base64
import errno
import boto3
import time
import json
import sys
import os
import re

_config = None
_args_config = None


def get_argv_config_dict():
    res = {}
    for item in sys.argv:
        parts = item.split('=')
        if len(parts) == 2:
            res[parts[0]] = parts[1]
    return res


def get_config(k, defaultval, fromstr=str):
    global _config, _args_config

    if _config is None:
        config_path = os.path.expanduser("~/.getbox")
        if os.path.exists(config_path):
            with open(config_path) as f:
                _config = json.loads(f.read())
        else:
            _config = {}

        _args_config = get_argv_config_dict()

    if k in _args_config:
        return fromstr(_args_config[k])
    else:
        return _config.get(k, defaultval)

CONFIG_EXTRA_TAGS = get_config('extra_tags', {})
CONFIG_OWNER_TAG_NAME = get_config('owner_tag_name', 'owner')
CONFIG_SSH_USER = get_config('ssh_user', 'ubuntu')
CONFIG_SSH_WAIT_TIMEOUT_SECONDS = get_config('ssh_wait_timeout_secoinds', 600)
CONFIG_ROOT_SIZE_GB = get_config('root_size_gb', 30)
CONFIG_AMI_ID = get_config('ami_id', 'ami-790ec601')       # 16.04
CONFIG_CUDA_AMI_ID = get_config('cuda_ami_id', 'ami-a1e534d9')  # 16.04 + CUDA
CONFIG_SSH_KEY_NAME = get_config('ssh_key_name', '')
CONFIG_IAM_ROLE_ARN = get_config('iam_role_arn', '')
CONFIG_SSH_FLAGS = get_config('ssh_flags', '-A')
CONFIG_SUBNETS = get_config('subnets', {})
CONFIG_SECURITY_GROUPS = get_config('security_groups', [])
CONFIG_SPOT_PRICE = get_config('spot_price', '3.00')
CONFIG_EBS_IOPS = get_config('ebs_iops', None, int)
CONFIG_EBS_VOLTYPE = get_config('ebs_volume_type', 'gp2')

ephemeral_info = """
t2.nano 0;t2.micro 0;t1.micro 0;t2.small 0;t2.medium 0;t2.large 0;c4.large 0;
m4.large 0;r4.large 0;t2.xlarge 0;c4.xlarge 0;m4.xlarge 0;r4.xlarge 0;
t2.2xlarge 0;c4.2xlarge 0;m4.2xlarge 0;r4.2xlarge 0;c4.4xlarge 0;m4.4xlarge 0;
p2.xlarge 0;r4.4xlarge 0;c4.8xlarge 0;r4.8xlarge 0;m4.10xlarge 0;m4.16xlarge 0;
r4.16xlarge 0;p2.8xlarge 0;p2.16xlarge 0;m3.medium 4;c3.large 32/2;m3.large 32;
r3.large 32;g2.2xlarge 60;c3.xlarge 80/2;m3.xlarge 80/2;r3.xlarge 80;
m1.small 160;c3.2xlarge 160/2;m3.2xlarge 160/2;r3.2xlarge 160;g2.8xlarge 240/2;
cr1.8xlarge 240/2;c3.4xlarge 320/2;r3.4xlarge 320;c1.medium 350;m1.medium 410;
m2.xlarge 420;f1.2xlarge 480;c3.8xlarge 640/2;r3.8xlarge 640/2;i2.xlarge 800;
m1.large 840/2;m2.2xlarge 850;i2.2xlarge 1600/2;m1.xlarge 1680/4;
c1.xlarge 1680/4;m2.4xlarge 1680/2;cg1.4xlarge 1680/2;x1.16xlarge 1920;
hi1.4xlarge 2048/2;i2.4xlarge 3200/4;cc2.8xlarge 3360/4;f1.16xlarge 3840/4;
x1.32xlarge 3840/2;d2.xlarge 6000/3;i2.8xlarge 6400/8;d2.2xlarge 12000/6;
d2.4xlarge 24000/12;hs1.8xlarge 48000/24;d2.8xlarge 48000/24;i3.large 475;
i3.xlarge 950;i3.2xlarge 1900;i3.4xlarge 3800/2;i3.8xlarge 7600/4;
i3.16xlarge 15200/8;g3.4xlarge 0;g3.8xlarge 0;g3.16xlarge 0
"""


def get_ami_id(instance_type):
    if instance_type.startswith('g2.') and CONFIG_CUDA_AMI_ID:
        return CONFIG_CUDA_AMI_ID
    if instance_type.startswith('g3.') and CONFIG_CUDA_AMI_ID:
        return CONFIG_CUDA_AMI_ID
    elif instance_type.startswith('p2.') and CONFIG_CUDA_AMI_ID:
        return CONFIG_CUDA_AMI_ID
    return CONFIG_AMI_ID


def all_instance_types():
    info = dict(tuple(s.strip().split()) for s in ephemeral_info.split(";"))
    return info.keys()


def get_ephemeral_info(type_):
    info = dict(tuple(s.strip().split()) for s in ephemeral_info.split(";"))

    if info[type_] == '0':
        return 0, 0
    elif '/' not in info[type_]:
        return int(info[type_]), 1
    else:
        return map(int, info[type_].split('/'))


INIT_EPHEMERALS = """#!/bin/bash
set -e

yum install -y mdadm || true

test -e /etc/apt/apt.conf.d/10periodic && echo 'APT::Periodic::Unattended-Upgrade "0";' >>/etc/apt/apt.conf.d/10periodic

umount /media/ephemeral{0..29} 2>&1 || true

EPHEMERALS=`curl http://169.254.169.254/latest/meta-data/block-device-mapping/ | grep ephemeral || true`

EPHEMERAL_DEVICES=''
for d in $EPHEMERALS ; do
    path=`curl -w "\n" http://169.254.169.254/latest/meta-data/block-device-mapping/$d 2>/dev/null | sed -e 's|^sd|/dev/xvd|'`
    if [ -e "$path" ]; then
        EPHEMERAL_DEVICES+=" $path"
    else
        path=$(echo $d | sed -e 's|^ephemeral|/dev/nvme|')
        if [ -e "${path}n1" ]; then
            EPHEMERAL_DEVICES+=" ${path}n1"
        fi
    fi
done


if [ "$EPHEMERAL_DEVICES" != "" ]; then

    while true; do
        /etc/init.d/docker stop  || true
        killall docker-containerd || true

        if pvcreate -y --dataalignment 1m $EPHEMERAL_DEVICES ; then
            break
        else
            sleep 1
        fi
    done

    vgcreate VolGroup01 $EPHEMERAL_DEVICES
    lvcreate -i $(echo ${EPHEMERAL_DEVICES} | wc -w) -l +100%FREE VolGroup01 -n ephemeralvol
fi
"""

BASIC_INIT = INIT_EPHEMERALS + """
pvcreate -y --dataalignment 1m /dev/xvdg
vgcreate VolGroup00 /dev/xvdg
lvcreate -i 1 -l +100%FREE VolGroup00 -n datavol
"""

EBS_MIRROR_INIT = BASIC_INIT + """
echo "y" | mdadm --create --verbose /dev/md0 --level=mirror --raid-devices=2 /dev/VolGroup01/ephemeralvol --write-mostly /dev/VolGroup00/datavol
mkfs.ext4 /dev/md0
mount /dev/md0 /mnt

/etc/init.d/docker start
"""

EBS_MIRROR_ATTACH_INIT = INIT_EPHEMERALS + """
mdadm -S /dev/md127 || true

# check if dm-0 is indeed the volume we need
[ $(dmsetup info /dev/dm-0 | grep Name | awk '{print $2}') == VolGroup00-datavol ]

mdadm --assemble --run /dev/md0 /dev/dm-0
mount /dev/md0 /mnt
mdadm --manage /dev/md0 -a /dev/VolGroup01/ephemeralvol

/etc/init.d/docker start
"""

EBS_FORMAT_INIT = BASIC_INIT + """
mkfs.ext4 /dev/VolGroup00/datavol
mount /dev/VolGroup00/datavol /mnt/

if [ "$EPHEMERAL_DEVICES" != "" ]; then
    mkdir /scratch
    mkfs.ext4 /dev/VolGroup01/ephemeralvol
    mount /dev/VolGroup01/ephemeralvol /scratch/
fi

/etc/init.d/docker start
"""

EBS_ATTACH_INIT = INIT_EPHEMERALS + """
while true  ; do
if [ -b /dev/VolGroup00/datavol ] ; then
    mount /dev/VolGroup00/datavol /mnt/
    break
else
    sleep 1
fi
done

if [ "$EPHEMERAL_DEVICES" != "" ]; then
    mkdir /scratch
    mkfs.ext4 /dev/VolGroup01/ephemeralvol
    mount /dev/VolGroup01/ephemeralvol /scratch/
fi

/etc/init.d/docker start
"""

COMPLETION_SCRIPT = """
_getbox()
{
    local cur
    INSTANCE_TYPES='""" + " ".join(all_instance_types()) + """'

    COMPREPLY=()

    _get_comp_words_by_ref cur

    prev="${COMP_WORDS[COMP_CWORD-1]}"

    if [ $COMP_CWORD -eq 1 ]; then
        COMPREPLY=( $(compgen -W "get kill keep unkeep ssh list rename" -- ${cur}) )
        return 0
    fi

    if [ "$prev" == "get" ]; then
        COMPREPLY=( $(compgen -W "$INSTANCE_TYPES" -- ${cur}) )
        return 0
    fi
} &&
complete -F _getbox getbox
"""

supports_color = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()
STYLES = {
    'error': '\033[1;31m',
    'success': '\033[1;37m',
    'dbname': '\033[1;37m',
    'blue': '\033[1;34m',
    'green': '\033[1;32m',
    'red': '\033[1;31m',
    'normal': '\033[0m',
    'bold': '\033[1m'
}


class Spinner:
    def __init__(self, message):
        self.spinner = 0
        self.message = message

    def tick(self):
        spinner_frames = '|/-\\'
        self.spinner = (self.spinner + 1) % len(spinner_frames)
        print_(self.message + spinner_frames[self.spinner] + "\r", end='')

    def done(self, done_msg='done'):
        print_(self.message + " " + done_msg + "\n", end='')


def print_(msg, file=sys.stderr, style=None, end="\n"):
    if supports_color and style in STYLES:
        print(STYLES[style] + msg, '\033[0m', file=file, end=end)
    else:
        print(msg, file=file, end=end)


def table_head(*columns):
    print_(' ', end='')
    for text, width, style in columns:
        print_(text[:width].ljust(width), end="", style='bold')
    print_(' ')
    return columns


def table_row(columns, *args):
    print_(' ', end='')
    for col, t in zip(columns, args):
        text, width, style = col
        print_(t[:width].ljust(width), end="", style='green')
    print_(' ')


def kill_volume(tags, ebs_id_prefix):
    client = boto3.client('ec2')
    vol = get_detached_ebs_vol(client, tags, ebs_id_prefix)

    t = volume_table_head()
    table_row(t, *format_volume_row(vol))

    print_("Delete this volume? [y/N] ", end='')
    if raw_input('') in ('Y', 'y'):
        client.delete_volume(VolumeId=vol['VolumeId'])
        sys.exit(0)
    else:
        print_("Cancelled")
        sys.exit(1)


def find_instance(client, tags, partId):
    client = boto3.client('ec2')

    response = client.describe_instances(Filters=[
                         {'Name': 'tag:' + CONFIG_OWNER_TAG_NAME,
                          'Values': [tags[CONFIG_OWNER_TAG_NAME]]}])

    for rsr in response['Reservations']:
        for inst in rsr['Instances']:
            if not tags_match(inst['Tags'], tags):
                continue

            if inst['State']['Name'] != 'running':
                continue

            name = instance_name(inst)

            if partId in inst['InstanceId'] or (name and partId in name):
                return inst

    print_('Instance id not found: %s. Try getbox list to see the list of instances' % partId, style='error')
    sys.exit(1)


def kill_instance(tags, partId):
    client = boto3.client('ec2')

    inst = find_instance(client, tags, partId)

    t = instance_table_head()
    table_row(t, *instance_table_row(inst))

    print_("Terminate this instance? [y/N] ", end='')
    if raw_input('') in ('Y', 'y'):
        client.terminate_instances(InstanceIds=[inst['InstanceId']])
        sys.exit(0)
    else:
        print_("Cancelled")
        sys.exit(1)


def rename_instance(tags, partId, name):
    client = boto3.client('ec2')

    inst = find_instance(client, tags, partId)

    t = instance_table_head()
    table_row(t, *instance_table_row(inst))

    print_("Rename this instance? [y/N] ", end='')
    if raw_input('') in ('Y', 'y'):
        instanceId = inst['InstanceId']
        instance_tags = [x for x in inst['Tags'] if x['Key'] != 'Name']
        instance_tags.append({'Key': 'Name', 'Value': name})

        client.create_tags(Resources=[instanceId], Tags=instance_tags)

        sys.exit(0)
    else:
        print_("Cancelled")
        sys.exit(1)


def ssh(tags, partId):
    client = boto3.client('ec2')

    response = client.describe_instances(Filters=[
                         {'Name': 'tag:' + CONFIG_OWNER_TAG_NAME,
                          'Values': [tags[CONFIG_OWNER_TAG_NAME]]}])

    for rsr in response['Reservations']:
        for inst in rsr['Instances']:
            if not tags_match(inst['Tags'], tags):
                continue

            if inst['State']['Name'] != 'running':
                continue

            name = instance_name(inst)

            if partId in inst['InstanceId'] or (name and partId in name):
                dns = inst['PublicDnsName']
                key = inst['KeyName']
                keys = subprocess.check_output(["ssh-add", "-l"]).splitlines()

                if not any((key in k) for k in keys):
                    print_('WARNING: You don\' seem to have key %s in your ssh agent' % key, style='bold')

                if hasattr(sys.stdout, 'isatty') and sys.stdout.isatty():
                    os.execv('/bin/bash', ['/bin/bash', '-c', 'ssh %s %s@%s' % (CONFIG_SSH_FLAGS, CONFIG_SSH_USER, dns)])
                else:
                    print_('%s@%s' % (CONFIG_SSH_USER, dns), file=sys.stdout)
                sys.exit(0)

    print_('Instance id not found: %s. Try getbox list to see the list of instances' % partId, style='error')
    sys.exit(1)


def tags_match(Tags, tagdict):
    tt = {t['Key']: t['Value'] for t in Tags if t['Key'] in tagdict}
    return tt == tagdict


def keep_ebs(tags, ebs_id_prefix, keep=True, block_device_name='/dev/sdg'):
    client = boto3.client('ec2')
    response = client.describe_volumes(Filters=[
                         {'Name': 'tag:' + CONFIG_OWNER_TAG_NAME,
                          'Values': [tags[CONFIG_OWNER_TAG_NAME]]}])

    for vol in response['Volumes']:
        if not tags_match(vol['Tags'], tags):
            continue
        if vol['VolumeId'].startswith(ebs_id_prefix):
            for a in vol['Attachments']:
                client.modify_instance_attribute(InstanceId=a['InstanceId'],
                                                 Attribute='blockDeviceMapping',
                                                 BlockDeviceMappings=[{
                                                    'DeviceName': block_device_name,
                                                    'Ebs': {'DeleteOnTermination': not keep}
                                                 }])
            if keep:
                print_("Volume %s will be kept around after instance termination" % vol['VolumeId'])
            else:
                print_("Volume %s will be deleted after instance termination" % vol['VolumeId'])
            break
    else:
        print_('Couldn\'t find attached EBS with id %s' % ebs_id_prefix, style='error')
        sys.exit(1)


def volume_table_head():
    return table_head(('VolumeId', 20, None),
                      ('Size', 10, None),
                      ('Type', 10, None),
                      ('Delete on termination', 27, None),
                      ('State', 60, None))


def format_volume_row(vol):
    attachment = ','.join(a['InstanceId'] for a in vol['Attachments'])
    delete_on_term = any(a['DeleteOnTermination'] for a in vol['Attachments'])

    if vol['State'] == 'in-use':
        state = 'in-use(%s)' % (attachment)
    else:
        state = vol['State']

    return (
          vol['VolumeId'],
          str(vol['Size']),
          vol['VolumeType'],
          'No' if not delete_on_term else 'Yes',
          state)


def list_volumes(tags):
    client = boto3.client('ec2')

    response = client.describe_volumes(Filters=[
                         {'Name': 'tag:' + CONFIG_OWNER_TAG_NAME,
                          'Values': [tags[CONFIG_OWNER_TAG_NAME]]}])

    if response['Volumes']:
        t = volume_table_head()

        for vol in response['Volumes']:
            if not tags_match(vol['Tags'], tags):
                continue

            table_row(t, *format_volume_row(vol))
        print_("")


def ebs_desc(inst, block_device_name='/dev/sdg'):
    ebs_desc = []

    for m in inst['BlockDeviceMappings']:
        if m['DeviceName'] == block_device_name:
            volumeId = m['Ebs']['VolumeId']
            delete_on_term = m['Ebs']['DeleteOnTermination']
            if delete_on_term:
                ebs_desc.append('%s(delete)' % volumeId)
            else:
                ebs_desc.append('%s(keep)' % volumeId)

    return ','.join(ebs_desc) if ebs_desc else 'None'


def instance_table_head():
    return table_head(('Id', 20, None),
                      ('Type', 10, None),
                      ('Started', 18, None),
                      ('EBS', 30, None),
                      ('DnsName', 53, None))


def instance_name(inst):
    for t in inst['Tags']:
        if t['Key'] == 'Name':
            return t['Value']


def instance_table_row(inst):
    return (instance_name(inst) or inst['InstanceId'],
            inst['InstanceType'],
            inst['LaunchTime'].strftime('%Y-%m-%d %H:%M'),
            ebs_desc(inst),
            inst['PublicDnsName'])


def list_instances(tags, block_device_name='/dev/sdg'):
    client = boto3.client('ec2')
    response = client.describe_instances(Filters=[
                         {'Name': 'tag:' + CONFIG_OWNER_TAG_NAME,
                          'Values': [tags[CONFIG_OWNER_TAG_NAME]]}])

    t = instance_table_head()

    instances = [inst for rsr in response['Reservations']
                 for inst in rsr['Instances']]

    for inst in sorted(instances, key=lambda x: x['LaunchTime']):
            if not tags_match(inst['Tags'], tags):
                continue

            if inst['State']['Name'] != 'running':
                continue

            table_row(t, *instance_table_row(inst))
    print_('')


def wait_for_ssh(client, dnsName):
    spin = Spinner("Waiting for ssh %s.. " % dnsName)
    spin.tick()
    t_start = time.time()

    while True:
        if time.time() - t_start > CONFIG_SSH_WAIT_TIMEOUT_SECONDS:
            spin.done()
            print_("Failed to connect to %s" % dnsName, style='error')
            sys.exit(1)

        try:
            sock = socket.create_connection((dnsName, 22), timeout=1)
            sock.close()
            spin.done()
            return
        except socket.timeout, e:
            time.sleep(1)
            spin.tick()

        except socket.error, e:
            if e.errno != errno.ECONNREFUSED:
                spin.done()
                print_("Failed to connect: %s" % e, style='error')
                sys.exit(1)
            else:
                time.sleep(1)
                spin.tick()


def tag_ebs(client, instanceId, tags, name='/dev/sdg'):
    response = client.describe_instances(Filters=[{'Name': 'instance-id', 'Values': [instanceId]}])
    for rsr in response['Reservations']:
        for inst in rsr['Instances']:
            for m in inst['BlockDeviceMappings']:
                if m['DeviceName'] == name:
                    client.create_tags(Resources=[m['Ebs']['VolumeId']], Tags=[{'Key':k, 'Value':v} for k, v in tags.items()])


def wait_for_init(client, instanceId):
    spin = Spinner("Waiting for instance %s to start.. " % instanceId)
    spin.tick()
    while True:
        response = client.describe_instances(Filters=[{'Name': 'instance-id', 'Values': [instanceId]}])
        for rsr in response['Reservations']:
            for inst in rsr['Instances']:
                st = inst['State']['Name']
                if st == 'pending':
                    spin.tick()
                    time.sleep(1)
                    break
                elif st == 'running':
                    spin.done()
                    return inst['PublicDnsName']
                elif st == 'terminated':
                    spin.done("failed")
                    sys.exit(1)
                else:
                    spin.done("failed")
                    print_('Unexpected state while waiting for instance start: %s' % st)


def get_detached_ebs_vol(client, tags, ebs_id_prefix):
    response = client.describe_volumes(Filters=[
                         {'Name': 'tag:' + CONFIG_OWNER_TAG_NAME,
                          'Values': [tags[CONFIG_OWNER_TAG_NAME]]}])

    for vol in response['Volumes']:
            if not tags_match(vol['Tags'], tags):
                continue

            if vol['VolumeId'].startswith(ebs_id_prefix):
                if vol['State'] == 'available':
                    return vol
                else:
                    print_('EBS volume %s exists, but it needs to be detached (currently %s)' % (vol['VolumeId'], vol['State']), style='error')
                    sys.exit(1)
    else:
        print_('Couldn\'t find EBS with id %s' % ebs_id_prefix, style='error')
        sys.exit(1)


def get_spot(instance_type, tags, ebs_id_prefix, volume_size=None,
                                                 mirror=None,
                                                 name=None,
                                                 keep=False):
    client = boto3.client('ec2')

    if ebs_id_prefix:
        vol = get_detached_ebs_vol(client, tags, ebs_id_prefix)
        vol_tags = {t['Key']: t['Value'] for t in vol['Tags']}

        # We store instance type in the volume metadata, so if it was not
        # specified explicitly, just take it from there. Same with the mirror
        # flag.
        if vol_tags.get('getbox'):
            tag_metadata = json.loads(vol_tags.get('getbox'))
            if ('instance_type' in tag_metadata) and instance_type is None:
                instance_type = tag_metadata['instance_type']
                print_("The volume was last used with instance type %s, using the same type" % instance_type)
            if ('mirror' in tag_metadata) and mirror is None:
                mirror = tag_metadata['mirror']

    if instance_type is None:
        instance_type = 'm4.4xlarge'
        print_("Using default instance type %s" % instance_type)

    launchSpec = {
            'ImageId': get_ami_id(instance_type),
            'KeyName': CONFIG_SSH_KEY_NAME,
            'InstanceType': instance_type,
            'SubnetId': random.choice(CONFIG_SUBNETS.values()),
            'EbsOptimized': is_ebs_optimized_type(instance_type),
            'IamInstanceProfile': {
                'Arn': CONFIG_IAM_ROLE_ARN,
            },
            'Monitoring': {
                'Enabled': True
            },
            'SecurityGroupIds': CONFIG_SECURITY_GROUPS
        }

    size_e, num_e = get_ephemeral_info(instance_type)

    if mirror:
        if volume_size is not None:
            print_("Cannot specify size in mirror mode, it is chosen automatically to match ephemeral storage capacity", style='error')
            sys.exit(1)

        if size_e == 0:
            print_("Cannot use mirror mode for instance type %s as it has no ephemeral drives" % instance_type, style='error')
            sys.exit(1)

        volume_size = size_e

    if ebs_id_prefix:
        # attach existing
        init = EBS_MIRROR_ATTACH_INIT if mirror else EBS_ATTACH_INIT
        ebs_vol_id, zone = vol['VolumeId'], vol['AvailabilityZone']
        launchSpec['UserData'] = base64.b64encode(init)
        launchSpec['SubnetId'] = CONFIG_SUBNETS[zone]
    else:
        # create new EBS
        ebs_vol_id = None
        init = EBS_MIRROR_INIT if mirror else EBS_FORMAT_INIT
        launchSpec['UserData'] = base64.b64encode(init)
        launchSpec['BlockDeviceMappings'] = [
                {
                    'DeviceName': '/dev/sdg',
                    'Ebs': {
                        'VolumeSize': volume_size or 100,
                        'DeleteOnTermination': not keep,
                        'VolumeType': CONFIG_EBS_VOLTYPE
                    }
                }
            ]

        if CONFIG_EBS_IOPS:
            launchSpec['BlockDeviceMappings'][0]['Ebs']['Iops'] = CONFIG_EBS_IOPS

    # skip /dev/sdg since we're using it for EBS (not tested on d2.8xl)
    drive_names = ['/dev/sd' + chr(ord('b') + i) for i in range(25) if i != 5]

    if 'BlockDeviceMappings' not in launchSpec:
        launchSpec['BlockDeviceMappings'] = []

    # root volume
    launchSpec['BlockDeviceMappings'].append({
            'DeviceName': '/dev/sda1',
            'Ebs': {'VolumeSize': CONFIG_ROOT_SIZE_GB,
                    'DeleteOnTermination': True,
                    'VolumeType': 'gp2'
                    }
        })

    for n in range(num_e):
        if 'BlockDeviceMappings' not in launchSpec:
            launchSpec['BlockDeviceMappings'] = []

        launchSpec['BlockDeviceMappings'].append({
                'DeviceName': drive_names[n],
                'VirtualName': 'ephemeral%d' % n
            })

    response = client.request_spot_instances(
        DryRun=False,
        SpotPrice=str(CONFIG_SPOT_PRICE),
        InstanceCount=1,
        Type='one-time',
        LaunchSpecification=launchSpec
    )

    time.sleep(0.5)  # magic sleep for consistency!
    requestId = response['SpotInstanceRequests'][0]['SpotInstanceRequestId']

    response = client.describe_spot_instance_requests(SpotInstanceRequestIds=[requestId])

    if response['SpotInstanceRequests'][0] == 'failed':
        return response['SpotInstanceRequests'][0]['Fault']

    spin = Spinner("Waiting for spot request (%s) to be fullfilled.. " % requestId)
    while True:
        if response['SpotInstanceRequests'][0]['Status']['Code'] == 'fulfilled':
            spin.done()
            instanceId = response['SpotInstanceRequests'][0]['InstanceId']

            instance_tags = [{'Key': k, 'Value': v} for k, v in tags.items()]
            if name:
                instance_tags.append({'Key': 'Name', 'Value': name})

            client.create_tags(Resources=[instanceId], Tags=instance_tags)

            if ebs_vol_id is None:
                vol_tags = dict(tags, getbox=json.dumps({'mirror': mirror,
                                                         'instance_type': instance_type}))
                if name:
                    vol_tags['Name'] = name

                tag_ebs(client, instanceId, vol_tags)

            dnsName = wait_for_init(client, instanceId)

            if ebs_vol_id is not None:
                print_("Attaching volume %s" % ebs_vol_id)
                client.attach_volume(VolumeId=ebs_vol_id, InstanceId=instanceId, Device='/dev/sdg')

            wait_for_ssh(client, dnsName)
            ssh(get_tags(), instanceId)
            break
        elif response['SpotInstanceRequests'][0]['Status']['Code'] in ('pending-evaluation', 'pending-fulfillment'):
            try:
                response = client.describe_spot_instance_requests(SpotInstanceRequestIds=[requestId])
                time.sleep(1)
                spin.tick()
            except KeyboardInterrupt:
                client.cancel_spot_instance_requests(SpotInstanceRequestIds=[requestId])
        elif response['SpotInstanceRequests'][0]['Status']['Code'] == 'canceled-before-fulfillment':
            spin.done('request cancelled')
            sys.exit(1)
        else:
            spin.done('failed')
            print_('Failed to get a spot instance: ')
            print_(response['SpotInstanceRequests'][0])
            sys.exit(1)


def install_check():
    v = boto3.__version__.split('.')
    version = map(int, v[:2])
    if version < [1, 4]:
        print_("boto3>=1.4 recommended, install it with pip install --update boto3")


def install_binary(dst='/usr/local/bin/getbox'):
    try:
        shutil.copyfile(sys.argv[0], dst)
        os.chmod(dst, 0755)
        return dst
    except IOError as e:
        if e.errno in (13, 1):
            print_('Cannot write to %s, try running this as root' % dst, style='error')
            sys.exit(1)
        else:
            raise


def install_comp():
    try:
        dst = subprocess.check_output(['bash',
                                       '-c',
                                       'echo $(brew --prefix)/etc/bash_completion.d/'],
                                      stderr=open(os.devnull)).strip()

        if not os.path.exists(dst):
            print_('Failed to install bash completion, %s does not exist' % dst, style='info')
        else:
            with open(os.path.join(dst, 'getbox'), 'w') as f:
                f.write(COMPLETION_SCRIPT)
    except IOError as e:
        if e.errno == 1:
            print_('Cannot write to %s, try running this as root' % dst, style='error')
            sys.exit(0)
        else:
            raise


def print_usage(f=sys.stdout):
    print_("\n          getbox: easy sandbox manager for ec2/spot. Usage: getbox <cmd> [parameters]", file=f)

    def cmd(name, descr, example):
        print_(name.ljust(15), end='', style='bold')
        print_(descr.ljust(62), end='')
        if example:
            print_(example)
        else:
            print_('')

    print_(" " * (86) + "(Example)")

    cmd("get",  "Get an ec2 instance and ssh into it.", "getbox get r3.8xlarge")
    cmd("", "...optionally, pass EBS volume id to attach.", "getbox get vol-321")
    cmd("", "...or both", "getbox get r3.8xlarge vol-321")
    cmd("", "...you can also name it", "getbox get r3.8xlarge --name mytestbox")
    cmd("", "...or specify EBS volume size", "getbox get r3.8xlarge 200GB")
    cmd("list", "List your instances and volumes", "getbox list")
    cmd("kill", "Kill an instance or (unattached) volume", "getbox kill 123")
    cmd("", "", "getbox kill vol-456")
    cmd("ssh",  "Log into the instance (uses utility1 key)", "getbox ssh 123")
    cmd("keep", "Disable delete-on-termination on an attached EBS volume", "getbox keep vol-123")
    cmd("unkeep", "Enable delete-on-termination on an attached EBS volume", "getbox unkeep vol-123")
    cmd("rename", "(Re)name an instance", "getbox rename i-123 mytestbox")
    cmd("install", "Install getbox to /usr/local/bin and add bash autocomplete", "getbox install")

    print_('')
    print_("Commands that take instance or volume id can take incomplete id as well.")
    print_('')
    print_("ssh", end='', style='bold')
    print_("and ", end='')
    print_("get", end='', style='bold')
    print_("commands can be used to log into the instance in a bash compatible shell, try: ssh $(getbox get)")
    print_("ssh", end='', style='bold')
    print_("command will just log you into the instance if used from tty: getbox ssh")
    print_("...but if it detects that its output was redirected, it'll just return login strings so you can do: rsync -av . $(getbox ssh):")
    print_('')


def get_owner():
    return getpass.getuser()


def get_tags():
    tt = {k: v for k, v in CONFIG_EXTRA_TAGS.iteritems()}
    tt[CONFIG_OWNER_TAG_NAME] = get_owner()
    return tt


def check_creds():
    sess = boto3._get_default_session()

    if hasattr(sess, 'get_credentials'):
        creds = sess.get_credentials()
        if not creds:
            print_('Failed to get AWS credentials', style='error')
            sys.exit(1)

    if get_owner() in ('root', 'ec2-user', 'nobody'):
        print_('Since we use your system username to tag instances, you can\'t run this as %s' % get_owner())
        sys.exit(1)


def is_ebs_optimized_type(s):
    no_ebs_opt = ['cc2', 'cg1', 't2', 'g2',
                  'r3', 'i2', 'hi1', 'hs1', 'm3',
                  'c3', 'm1', 'c1', 'm2', 't1',
                  'cr1', 'f1']

    for f in no_ebs_opt:
        if s.startswith(f):
            return False
    else:
        return True


def valid_instance_type(s):
    families = [
        'm1', 'm2', 'm3', 'm4',
        'r3', 'r4',
        'i2', 'i3',
        'hs1',
        'hi1',
        'x1',
        'g2', 'g3',
        'p2',
        't1', 't2',
        'c3', 'c4', 'c1', 'cc2', 'cg1', 'cr1',
        'f1',
        'd2'
    ]
    for f in families:
        if s.startswith(f + '.'):
            return True
    else:
        return False


def parse_size(s):
    m = re.match('^(\d+)(G|GB)$', s)
    if m:
        return int(m.group(1))

    m = re.match('^(\d+)(T|TB)$', s)
    if m:
        return int(m.group(1)) * 1000


if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('--mirror', help='mirror mode', action='store_true', default=None)
    parser.add_argument('--name', help='name', type=str)
    parser.add_argument('cmd', type=str, nargs='?')
    parser.add_argument('args', nargs='*')
    parser.print_usage = print_usage
    p = parser.parse_known_args()[0]

    if p.cmd is None:
        print_usage()
    elif p.cmd == 'install':
        install_check()
        bin_path = install_binary()
        install_comp()
        print_('Installed at %s' % bin_path, style='success')
    elif p.cmd == 'get':
        check_creds()
        type_ = None

        vol_prefix = None

        mirror = None
        volume_size = None
        keep = False

        for a in p.args:
            if a.startswith('vol-'):
                vol_prefix = a
            elif valid_instance_type(a):
                type_ = a
            elif parse_size(a):
                volume_size = parse_size(a)
            elif a == 'keep':
                keep = True
            else:
                if '=' not in a:
                    print_('Unknown option: %s' % a, style='error')
                    sys.exit(1)

        get_spot(type_, get_tags(), vol_prefix,
                 volume_size=volume_size,
                 mirror=p.mirror, name=p.name,
                 keep=keep)
    elif p.cmd in ('name', 'rename'):
        if len(p.args) != 2:
            print_('Usage: rename <id-or-name> <name>', style='error')
            sys.exit(1)
        rename_instance(get_tags(), p.args[0], p.args[1])
    elif p.cmd == 'ssh':
        check_creds()
        if len(p.args) != 1:
            print_('Usage: ssh <instance-id>', style='error')
            sys.exit(1)
        else:
            ssh(get_tags(), p.args[0])
    elif p.cmd == 'kill':
        check_creds()
        if len(p.args) != 1:
            print_('Usage: kill <instance-or-volume-id>', style='error')
            sys.exit(1)
        else:
            vol_prefix = None
            for a in p.args:
                if a.startswith('vol-'):
                    vol_prefix = a
            if vol_prefix is None:
                kill_instance(get_tags(), p.args[0])
            else:
                kill_volume(get_tags(), vol_prefix)
    elif p.cmd == 'keep':
        check_creds()
        if len(p.args) != 1:
            print_('Usage: keep <ebs-id>', style='error')
            sys.exit(1)
        else:
            keep_ebs(get_tags(), p.args[0], True)
    elif p.cmd in ('unkeep', 'dontkeep'):
        check_creds()
        if len(p.args) != 1:
            print_('Usage: unkeep <ebs-id>', style='error')
            sys.exit(1)
        else:
            keep_ebs(get_tags(), p.args[0], False)
    elif p.cmd in ('list', 'ls'):
        check_creds()
        list_instances(get_tags())
        list_volumes(get_tags())
    else:
        print_usage()
